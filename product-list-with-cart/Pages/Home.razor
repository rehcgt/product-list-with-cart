@page "/"
@using System.IO
@using Newtonsoft.Json

@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem sm="12" md="9">
            <MudElement HtmlTag="h1" Style="font-weight:bold">Desserts</MudElement>
            <MudGrid>
                @if (products != null && products.Length > 0)
                {
                    @foreach (var p in products)
                    {
                        var imageUrl = currentBreakpoint >= Breakpoint.Md ? p.Image.Desktop : currentBreakpoint == Breakpoint.Sm ? p.Image.Tablet : p.Image.Mobile;
                        <ProductCard p="@p" imageUrl="@imageUrl"></ProductCard>
                    }
                }
            </MudGrid>
        </MudItem>
        <MudItem sm="12" md="3" Class="pl-3">
            <MudElement HtmlTag="div" Class="pa-4 rounded-lg" Style="background-color: white;">                
                <Cart></Cart>
            </MudElement>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    [Inject]
    private HttpClient Http { get; set; }

    private List<Breakpoint> _breakpointHistory = new();
    private Breakpoint _start;
    private string jsonPath = Path.Combine("requirements", "data.json");
    private Product[]? products;
    private Breakpoint currentBreakpoint;

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<Product[]>(jsonPath);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnBreakpointChanged(object? sender, Breakpoint breakpoint)
    {
        currentBreakpoint = breakpoint;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            _start = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            _breakpointHistory.Add(browserViewportEventArgs.Breakpoint);
        }

        return InvokeAsync(StateHasChanged);
    }
}